package com.hifeful.mealmania.presentation.myMeals

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.commit
import com.hifeful.mealmania.R
import com.hifeful.mealmania.common.ObservableSourceFragment
import com.hifeful.mealmania.databinding.FragmentMyMealsBinding
import com.hifeful.mealmania.presentation.details.MealDetailsFragment
import com.hifeful.mealmania.presentation.util.SpacingItemDecoration
import dagger.hilt.android.AndroidEntryPoint
import io.reactivex.functions.Consumer
import javax.inject.Inject

/**
 * 1Ô∏è‚É£ Please, avoid custom base classes. The exceptions are:
 *    üëå Framework obligation: Activity, Fragment, ViewModel, etc.
 *    üëå Data classes modeling
 *
 * üí¢ The architectural components (generated by us) mustn't rely on the inheritance
 */
@AndroidEntryPoint
class MyMealsFragment : ObservableSourceFragment<MyMealsUiEvent>(), Consumer<MyMealsViewState> {

    @Inject
    lateinit var myMealsFeature: MyMealsFeature

    /**
     *  1Ô∏è‚É£ Things might be improved to avoid having the same two variables
     *     https://zhuinden.medium.com/simple-one-liner-viewbinding-in-fragments-and-activities-with-kotlin-961430c6c07c
     *  2Ô∏è‚É£ The not-null assertion operator (!!) mustn't be used in the code.
     *     The only place where it's allowed is unit-tests.
     */
    private var _binding: FragmentMyMealsBinding? = null
    private val binding get() = _binding!!

    private var recentMealsAdapter: RecentMealsAdapter? = null
    private var favouriteMealsAdapter: FavouriteMealsAdapter? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setHasOptionsMenu(false)
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentMyMealsBinding.inflate(inflater, container, false)

        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        /**
         *  Do you really need the separate setup MyMealsFragmentBindings?
         *  I didn't get what is the benefit of it
         */
        val bindings = MyMealsFragmentBindings(this, myMealsFeature)
        bindings.setup(this)
        setUpViews()

        setUpLoading()
    }

    private fun setUpViews() {
        recentMealsAdapter = RecentMealsAdapter().apply {
            onMealClickListener = {
                // You should fire Event to ViewModel/Presenter where it will be handled with
                // SideEffect outcome (i.e., doing the navigation)
                attachMealDetailsFragment(it)
            }
        }
        binding.recyclerViewRecentMeals.apply {
            adapter = recentMealsAdapter
            addItemDecoration(
                SpacingItemDecoration(
                    context,
                    displayMode = SpacingItemDecoration.VERTICAL,
                    marginValue = R.dimen.margin_8dp
                )
            )
            isNestedScrollingEnabled = false
        }

        favouriteMealsAdapter = FavouriteMealsAdapter().apply {
            onMealClickListener = { attachMealDetailsFragment(it) }
        }
        binding.recyclerViewFavouriteMeals.apply {
            adapter = favouriteMealsAdapter
        }
    }

    /**
     *  Not sure I am understand it. It should be a part of ViewModel/Presenter, no?
     *  The state updates should be only allowed in VM/P and during events processing
     */
    private fun setUpLoading() {
        onNext(MyMealsUiEvent.LoadRecentMeals)
        onNext(MyMealsUiEvent.LoadFavouriteMeals)
    }

    private fun attachMealDetailsFragment(id: String) {
        parentFragmentManager.commit {
            add(R.id.fragment_container_view, MealDetailsFragment.getInstance(id))
            setReorderingAllowed(true)
            addToBackStack(null)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()

        _binding = null
    }

    // What's the purpose of this block?
    override fun accept(viewState: MyMealsViewState) {
        Log.d("MyMealsFragment", viewState.favouriteMeals.toString())
        binding.bind(viewState, recentMealsAdapter, favouriteMealsAdapter)
    }
}